{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_STUDENT, LOGOUT } from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect } from 'react-router-dom';\nexport const createNewStudent = (newStudent, history) => async dispatch => {\n  try {\n    await axios.post(`http://localhost:8080/api/register`, newStudent);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem('logged');\n  localStorage.removeItem('jwtToken'); //dispatch({ type: LOGOUT }); \n};\nexport const login = (LoginRequest, history) => async dispatch => {\n  try {\n    const {\n      email,\n      password,\n      role1,\n      userId\n    } = LoginRequest;\n    const login = {\n      email,\n      password\n    };\n    console.log(login); // post => Login Request\n\n    if (role1 == 'student') {\n      const res = await axios.post(`http://localhost:8080/api/loginstudent`, login); // extract token from res.data\n\n      const {\n        token,\n        role\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      localStorage.setItem(\"userId\", userId);\n      console.log(role); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n      history.push(\"/studentDashboard\");\n    } else if (role1 == 'warden') {\n      const res = await axios.post(`http://localhost:8080/api/loginwarden`, login); // extract token from res.data\n\n      const {\n        token,\n        role\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      localStorage.setItem(\"userId\", userId);\n      console.log(role); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n      history.push(\"/wardenDashboard\");\n    } else if (role1 == 'admin') {\n      const res = await axios.post(`http://localhost:8080/api/loginadmin`, login); // extract token from res.data\n\n      const {\n        token,\n        role\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      localStorage.setItem(\"userId\", userId);\n      console.log(role); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n      history.push(\"/adminDashboard\");\n    } else {\n      throw new Error('Who are you?');\n    }\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};","map":{"version":3,"sources":["F:/react-hostel-main/src/actions/securityActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_STUDENT","LOGOUT","setJWTToken","jwt_decode","Redirect","createNewStudent","newStudent","history","dispatch","post","push","type","payload","err","response","data","logout","localStorage","removeItem","login","LoginRequest","email","password","role1","userId","console","log","res","token","role","setItem","decoded","Error"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS,SET_CURRENT_STUDENT,LOGOUT} from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\nimport  { Redirect } from 'react-router-dom'\n\n\nexport const createNewStudent = (newStudent, history) => async dispatch => {\n  try {\n    await axios.post(`http://localhost:8080/api/register`, newStudent);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n\nexport const logout = () => async dispatch => {\n  localStorage.removeItem('logged');\n  localStorage.removeItem('jwtToken');\n\n //dispatch({ type: LOGOUT }); \n \n}\n\n\nexport const login = (LoginRequest,history) => async dispatch => {\n  try {\n    const {email, password, role1, userId} = LoginRequest;\n    const login = {email,password};\n    console.log(login);\n    // post => Login Request\n    if(role1 == 'student'){\n      const res = await axios.post(`http://localhost:8080/api/loginstudent`, login);\n      // extract token from res.data\n      const { token,role } = res.data;\n      // store the token in the localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      localStorage.setItem(\"userId\",userId);\n      \n      console.log(role);\n      // set our token in header ***\n      setJWTToken(token);\n      // decode token on React\n      const decoded = jwt_decode(token);\n      // dispatch to our securityReducer\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n  \n      history.push(\"/studentDashboard\");\n    }\n    else if(role1 == 'warden'){\n      const res = await axios.post(`http://localhost:8080/api/loginwarden`, login);\n      // extract token from res.data\n      const { token,role } = res.data;\n      // store the token in the localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      localStorage.setItem(\"userId\",userId);\n      console.log(role);\n      // set our token in header ***\n      setJWTToken(token);\n      // decode token on React\n      const decoded = jwt_decode(token);\n      // dispatch to our securityReducer\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n  \n      history.push(\"/wardenDashboard\");\n    }else if(role1 == 'admin'){\n      const res = await axios.post(`http://localhost:8080/api/loginadmin`, login);\n      // extract token from res.data\n      const { token,role } = res.data;\n      // store the token in the localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      localStorage.setItem(\"userId\",userId);\n      console.log(role);\n      // set our token in header ***\n      setJWTToken(token);\n      // decode token on React\n      const decoded = jwt_decode(token);\n      // dispatch to our securityReducer\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n  \n      history.push(\"/adminDashboard\");\n    }else{\n      throw new Error('Who are you?')\n    }\n    \n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}