{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_STUDENT } from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\nexport const createNewStudent = (newStudent, history) => async dispatch => {\n  try {\n    await axios.post(`http://localhost:8080/api/register`, newStudent);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport function logout() {\n  try {\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n}\nexport const login = (LoginRequest, history) => async dispatch => {\n  try {\n    const {\n      email,\n      password,\n      role1\n    } = LoginRequest;\n    const login = {\n      email,\n      password\n    };\n    console.log(login); // post => Login Request\n\n    if (role1 == 'student') {\n      const res = await axios.post(`http://localhost:8080/api/loginstudent`, login); // extract token from res.data\n\n      const {\n        token,\n        role\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      console.log(role); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n      history.push(\"/studentDashboard\");\n    } else if (role1 == 'warden') {\n      const res = await axios.post(`http://localhost:8080/api/loginwarden`, login); // extract token from res.data\n\n      const {\n        token,\n        role\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token);\n      console.log(role); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n      history.push(\"/wardenDashboard\");\n    } else if (role1 == 'admin') {\n      const res = await axios.post(`http://localhost:8080/api/loginadmin`, login); // extract token from res.data\n\n      const {\n        token,\n        role\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token);\n      console.log(role); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n      history.push(\"/adminDashboard\");\n    } else {\n      throw new Error('Who are you?');\n    }\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};","map":{"version":3,"sources":["F:/react-hostel-main/src/actions/securityActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_STUDENT","setJWTToken","jwt_decode","createNewStudent","newStudent","history","dispatch","post","push","type","payload","err","response","data","logout","login","LoginRequest","email","password","role1","console","log","res","token","role","localStorage","setItem","decoded","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAoBC,mBAApB,QAA8C,SAA9C;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,UAAD,EAAaC,OAAb,KAAyB,MAAMC,QAAN,IAAkB;AACzE,MAAI;AACF,UAAMR,KAAK,CAACS,IAAN,CAAY,oCAAZ,EAAiDH,UAAjD,CAAN;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAdM;AAgBP,OAAO,SAASC,MAAT,GAAkB;AACvB,MAAI;AAEFT,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF;AAGD,OAAO,MAAME,KAAK,GAAG,CAACC,YAAD,EAAcX,OAAd,KAA0B,MAAMC,QAAN,IAAkB;AAC/D,MAAI;AACF,UAAM;AAACW,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,QAA2BH,YAAjC;AACA,UAAMD,KAAK,GAAG;AAACE,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAAd;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAHE,CAIF;;AACA,QAAGI,KAAK,IAAI,SAAZ,EAAsB;AACpB,YAAMG,GAAG,GAAG,MAAMxB,KAAK,CAACS,IAAN,CAAY,wCAAZ,EAAqDQ,KAArD,CAAlB,CADoB,CAEpB;;AACA,YAAM;AAAEQ,QAAAA,KAAF;AAAQC,QAAAA;AAAR,UAAiBF,GAAG,CAACT,IAA3B,CAHoB,CAIpB;;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EAPoB,CAQpB;;AACAvB,MAAAA,WAAW,CAACsB,KAAD,CAAX,CAToB,CAUpB;;AACA,YAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B,CAXoB,CAYpB;;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,mBADC;AAEPU,QAAAA,OAAO,EAAEiB;AAFF,OAAD,CAAR;AAKAtB,MAAAA,OAAO,CAACG,IAAR,CAAa,mBAAb;AACD,KAnBD,MAoBK,IAAGW,KAAK,IAAI,QAAZ,EAAqB;AACxB,YAAMG,GAAG,GAAG,MAAMxB,KAAK,CAACS,IAAN,CAAY,uCAAZ,EAAoDQ,KAApD,CAAlB,CADwB,CAExB;;AACA,YAAM;AAAEQ,QAAAA,KAAF;AAAQC,QAAAA;AAAR,UAAiBF,GAAG,CAACT,IAA3B,CAHwB,CAIxB;;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EANwB,CAOxB;;AACAvB,MAAAA,WAAW,CAACsB,KAAD,CAAX,CARwB,CASxB;;AACA,YAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B,CAVwB,CAWxB;;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,mBADC;AAEPU,QAAAA,OAAO,EAAEiB;AAFF,OAAD,CAAR;AAKAtB,MAAAA,OAAO,CAACG,IAAR,CAAa,kBAAb;AACD,KAlBI,MAkBC,IAAGW,KAAK,IAAI,OAAZ,EAAoB;AACxB,YAAMG,GAAG,GAAG,MAAMxB,KAAK,CAACS,IAAN,CAAY,sCAAZ,EAAmDQ,KAAnD,CAAlB,CADwB,CAExB;;AACA,YAAM;AAAEQ,QAAAA,KAAF;AAAQC,QAAAA;AAAR,UAAiBF,GAAG,CAACT,IAA3B,CAHwB,CAIxB;;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EANwB,CAOxB;;AACAvB,MAAAA,WAAW,CAACsB,KAAD,CAAX,CARwB,CASxB;;AACA,YAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B,CAVwB,CAWxB;;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,mBADC;AAEPU,QAAAA,OAAO,EAAEiB;AAFF,OAAD,CAAR;AAKAtB,MAAAA,OAAO,CAACG,IAAR,CAAa,iBAAb;AACD,KAlBK,MAkBD;AACH,YAAM,IAAIoB,KAAJ,CAAU,cAAV,CAAN;AACD;AAEF,GAjED,CAiEE,OAAOjB,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAxEM","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS,SET_CURRENT_STUDENT} from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createNewStudent = (newStudent, history) => async dispatch => {\n  try {\n    await axios.post(`http://localhost:8080/api/register`, newStudent);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n\nexport function logout() {\n  try {\n    \n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n}\n\n\nexport const login = (LoginRequest,history) => async dispatch => {\n  try {\n    const {email, password, role1} = LoginRequest;\n    const login = {email,password};\n    console.log(login);\n    // post => Login Request\n    if(role1 == 'student'){\n      const res = await axios.post(`http://localhost:8080/api/loginstudent`, login);\n      // extract token from res.data\n      const { token,role } = res.data;\n      // store the token in the localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"logged\", true);\n      console.log(role);\n      // set our token in header ***\n      setJWTToken(token);\n      // decode token on React\n      const decoded = jwt_decode(token);\n      // dispatch to our securityReducer\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n  \n      history.push(\"/studentDashboard\");\n    }\n    else if(role1 == 'warden'){\n      const res = await axios.post(`http://localhost:8080/api/loginwarden`, login);\n      // extract token from res.data\n      const { token,role } = res.data;\n      // store the token in the localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      console.log(role);\n      // set our token in header ***\n      setJWTToken(token);\n      // decode token on React\n      const decoded = jwt_decode(token);\n      // dispatch to our securityReducer\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n  \n      history.push(\"/wardenDashboard\");\n    }else if(role1 == 'admin'){\n      const res = await axios.post(`http://localhost:8080/api/loginadmin`, login);\n      // extract token from res.data\n      const { token,role } = res.data;\n      // store the token in the localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      console.log(role);\n      // set our token in header ***\n      setJWTToken(token);\n      // decode token on React\n      const decoded = jwt_decode(token);\n      // dispatch to our securityReducer\n      dispatch({\n        type: SET_CURRENT_STUDENT,\n        payload: decoded\n      });\n  \n      history.push(\"/adminDashboard\");\n    }else{\n      throw new Error('Who are you?')\n    }\n    \n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}